import xml.etree.ElementTree as ET

# class to struct informations extracted by parser_mpd function.
class mpd_node:
    def __init__(self):
        self.mpd_dict = {}
        self.period_dict = {}
        self.program_info_dict = {}
        self.adaptation_set_list = []
        self.adaptation_set_dict = {}
        self.title = ""
        self.segment_template = {}
        self.first_level_adp_set = {}
            
    def add_mpd_info(self, data):
        self.mpd_dict = data
    
    # return mpd_info dict
    def get_mpd_info(self):
        return self.mpd_dict
    
    def add_period_info(self, data):
        self.period_dict = data
        
    # return period_info dict
    def get_period_info(self):
        return self.period_dict
    
    def add_program_info(self, data):
        self.program_info_dict = data
    
    # return program_info dict
    def get_program_info(self):
        return self.program_info_dict
    
    def add_adaptation_set_info(self, data):
        self.adaptation_set_list = data
    
    # return adaptation set
    def get_adaptation_set_info(self):
        return self.adaptation_set_list
    
    def add_title(self, data):
        self.title = data
    
    # return title
    def get_title(self):
        return self.title
    
    def add_segment_template(self, data):
        self.segment_template = data
    
    # return segment template
    def get_segment_template(self):
        return self.segment_template
    
    def add_first_level_adp_set(self, data):
        self.first_level_adp_set = data
    
    # return first level adp set
    def get_first_level_adp_set(self):
        return self.first_level_adp_set

# mpd file parsing.
def parse_mpd(file_path, xml_str = None):
    node = mpd_node()
    adaptation_set = []

    if xml_str:
        root = ET.fromstring(xml_str)
    else:
        tree = ET.parse(file_path)
        root = tree.getroot()

    node.add_mpd_info(root.attrib)

    # inside mpd
    for child in root:
        if child.tag == "{urn:mpeg:dash:schema:mpd:2011}ProgramInformation":
            node.add_program_info(child.attrib)
        elif child.tag == "{urn:mpeg:dash:schema:mpd:2011}Period":
            node.add_period_info(child.attrib)
        # inside program_information and period
        for inside in child:
            if inside.tag == "{urn:mpeg:dash:schema:mpd:2011}Title":
                node.add_title(inside.text)
            elif inside.tag == "{urn:mpeg:dash:schema:mpd:2011}AdaptationSet":
                node.add_first_level_adp_set(inside.attrib)
            # inside adaptation_set
            for adp_set in inside:
                if adp_set.tag == "{urn:mpeg:dash:schema:mpd:2011}SegmentTemplate":
                    node.add_segment_template(adp_set.attrib)
                else:
                    adaptation_set.append(adp_set.attrib)
    
    node.add_adaptation_set_info(adaptation_set)
        
    return node

# return the specific attribute value. 
# if representation_id is passed, returns the correspondent dict.
def navigate_mpd(mpd_node, attribute = None, representation_id = None):
    handle_dict = {}
    handle_list = []
    
    if representation_id:
        handle_list = mpd_node.get_adaptation_set_info()
        for i, item in enumerate(handle_list):
            if item['id'] == representation_id:
                return item
            
    else:
        handle_dict = mpd_node.get_mpd_info()
        for key in handle_dict:
            if attribute == key:
                return(attribute, handle_dict[key])

        handle_dict = mpd_node.get_period_info()
        for key in handle_dict:
            if attribute == key:
                return(attribute, handle_dict[key])

        handle_dict = mpd_node.get_program_info()
        for key in handle_dict:
            if attribute == key:
                return(attribute, handle_dict[key])

        handle_dict = mpd_node.get_segment_template()
        for key in handle_dict:
            if attribute == key:
                return(attribute, handle_dict[key])

        handle_dict = mpd_node.get_first_level_adp_set()
        for key in handle_dict:
            if attribute == key:
                return(attribute, handle_dict[key])

# copy and paste from mpd file; still need to test the actual payload retrieval
string = '''
<!--  MPD file Generated with GPAC version 0.5.1-DEV-rev5379  on 2014-09-10T13:14:57Z -->
<MPD xmlns="urn:mpeg:dash:schema:mpd:2011" minBufferTime="PT1.500000S" type="static" mediaPresentationDuration="PT0H9M55.46S" profiles="urn:mpeg:dash:profile:isoff-live:2011">
    <ProgramInformation moreInformationURL="http://gpac.sourceforge.net">
        <Title>dashed/BigBuckBunny_1s_simple_2014_05_09.mpd generated by GPAC</Title>
    </ProgramInformation>
    <Period duration="PT0H9M55.46S">
        <AdaptationSet segmentAlignment="true" group="1" maxWidth="480" maxHeight="360" maxFrameRate="24" par="4:3">
            <SegmentTemplate timescale="96" media="bunny_$Bandwidth$bps/BigBuckBunny_1s$Number$.m4s" startNumber="1" duration="96" initialization="bunny_$Bandwidth$bps/BigBuckBunny_1s_init.mp4"/>
            <Representation id="320x240 47.0kbps" mimeType="video/mp4" codecs="avc1.42c00d" width="320" height="240" frameRate="24" sar="1:1" startWithSAP="1" bandwidth="46980"/>
            <Representation id="320x240 92.0kbps" mimeType="video/mp4" codecs="avc1.42c00d" width="320" height="240" frameRate="24" sar="1:1" startWithSAP="1" bandwidth="91917"/>
            <Representation id="320x240 135.0kbps" mimeType="video/mp4" codecs="avc1.42c00d" width="320" height="240" frameRate="24" sar="1:1" startWithSAP="1" bandwidth="135410"/>
            <Representation id="480x360 182.0kbps" mimeType="video/mp4" codecs="avc1.42c015" width="480" height="360" frameRate="24" sar="1:1" startWithSAP="1" bandwidth="182366"/>
            <Representation id="480x360 226.0kbps" mimeType="video/mp4" codecs="avc1.42c015" width="480" height="360" frameRate="24" sar="1:1" startWithSAP="1" bandwidth="226106"/>
            <Representation id="480x360 270.0kbps" mimeType="video/mp4" codecs="avc1.42c015" width="480" height="360" frameRate="24" sar="1:1" startWithSAP="1" bandwidth="270316"/>
            <Representation id="480x360 353.0kbps" mimeType="video/mp4" codecs="avc1.42c015" width="480" height="360" frameRate="24" sar="1:1" startWithSAP="1" bandwidth="352546"/>
            <Representation id="480x360 425.0kbps" mimeType="video/mp4" codecs="avc1.42c015" width="480" height="360" frameRate="24" sar="1:1" startWithSAP="1" bandwidth="424520"/>
            <Representation id="854x480 538.0kbps" mimeType="video/mp4" codecs="avc1.42c01e" width="854" height="480" frameRate="24" sar="1:1" startWithSAP="1" bandwidth="537825"/>
            <Representation id="854x480 621.0kbps" mimeType="video/mp4" codecs="avc1.42c01e" width="854" height="480" frameRate="24" sar="1:1" startWithSAP="1" bandwidth="620705"/>
            <Representation id="1280x720 808.0kbps" mimeType="video/mp4" codecs="avc1.42c01f" width="1280" height="720" frameRate="24" sar="1:1" startWithSAP="1" bandwidth="808057"/>
            <Representation id="1280x720 1.1Mbps" mimeType="video/mp4" codecs="avc1.42c01f" width="1280" height="720" frameRate="24" sar="1:1" startWithSAP="1" bandwidth="1071529"/>
            <Representation id="1280x720 1.3Mbps" mimeType="video/mp4" codecs="avc1.42c01f" width="1280" height="720" frameRate="24" sar="1:1" startWithSAP="1" bandwidth="1312787"/>
            <Representation id="1280x720 1.7Mbps" mimeType="video/mp4" codecs="avc1.42c01f" width="1280" height="720" frameRate="24" sar="1:1" startWithSAP="1" bandwidth="1662809"/>
            <Representation id="1920x1080 2.2Mbps" mimeType="video/mp4" codecs="avc1.42c032" width="1920" height="1080" frameRate="24" sar="1:1" startWithSAP="1" bandwidth="2234145"/>
            <Representation id="1920x1080 2.6Mbps" mimeType="video/mp4" codecs="avc1.42c032" width="1920" height="1080" frameRate="24" sar="1:1" startWithSAP="1" bandwidth="2617284"/>
            <Representation id="1920x1080 3.3Mbps" mimeType="video/mp4" codecs="avc1.42c032" width="1920" height="1080" frameRate="24" sar="1:1" startWithSAP="1" bandwidth="3305118"/>
            <Representation id="1920x1080 3.8Mbps" mimeType="video/mp4" codecs="avc1.42c032" width="1920" height="1080" frameRate="24" sar="1:1" startWithSAP="1" bandwidth="3841983"/>
            <Representation id="1920x1080 4.2Mbps" mimeType="video/mp4" codecs="avc1.42c032" width="1920" height="1080" frameRate="24" sar="1:1" startWithSAP="1" bandwidth="4242923"/>
            <Representation id="1920x1080 4.7Mbps" mimeType="video/mp4" codecs="avc1.42c032" width="1920" height="1080" frameRate="24" sar="1:1" startWithSAP="1" bandwidth="4726737"/>
        </AdaptationSet>
    </Period>
</MPD>
'''

'''
###############################
# examples for parse from string
###############################

exemplo = mpd_node()
exemplo = parse_mpd('something', string)

print(exemplo.get_mpd_info())
print(navigate_mpd(exemplo, 'timescale'))
print(navigate_mpd(exemplo, 'something', '480x360 182.0kbps'))
'''

'''
###############################
# examples for parse from file
###############################
exemplo = mpd_node()
exemplo = parse_mpd('file.mpd')

print(exemplo.get_mpd_info())
print(navigate_mpd(exemplo, 'timescale'))
print(navigate_mpd(exemplo, 'blah', '480x360 182.0kbps'))
'''